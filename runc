#!/usr/bin/env bash

# NAME
#	runc - compile and run C

# SYNOPSIS
#	[1] runc FILE [ARGUMENTS]
#	[2] runc STATEMENTS [ARGUMENTS]
#	[3] runc
#	[4] runc OPTION

# DESCRIPTION 
#	runc compiles C code with gcc then runs it.
#	input can be : 
#	[1] a self-contained C file with headers and main()
#	[2] an inline string of C statements
#	[3] a stream of C statements
# 	ARGUMENTS are command-line arguments to the compiled program.
# 	OPTIONS -h help, -v version

# EXAMPLES
#	[1] runc foo.c
#	[1] runc hello.c Bob
#	[2] runc 'puts("Hello Bob!");'
# 	[3] runc
#		int i = 10;
#		printf(\"%d\n\", i);
#		[CTRL+D]
#	[3] cat statements.c | runc

# AUTHOR 
#	Francois Alcover

#=============================================================

# strict mode
set -e
set -u
set -o pipefail

runc_version='0.2'

runc_headers="\
#include <stdlib.h>
#include <stdio.h>
#include <stddef.h>
#include <stdint.h>
#include <stdbool.h>
#include <stdarg.h>
#include <math.h>
#include <inttypes.h>
#include <complex.h>
#include <float.h>
#include <string.h>
#include <limits.h>
#include <ctype.h>
#include <locale.h>
#include <time.h>
#include <assert.h>
#include <errno.h>
"

runc_tpl="\
// file generated by runc

$runc_headers
int main (int argc, char **argv)
{
	@code
	return 0;
}"

# -lc ?
runc_flags="-std=gnu11 -lm -Wno-pedantic -Wno-unused-variable"

bold=$(tput bold)
norm=$(tput sgr0)

runc_help="\
runc - compile and run C
Usage:    
- run self-standing file (with headers and main) :
${bold}$ runc full.c [args..]${norm}

- run snippet file (just statements) :
${bold}$ cat snip.c | runc${norm}

- run prompt (enter your statements) :
${bold}$ runc${norm}
int i = 10;
printf(\"%d\\n\", i);
[CTRL+D]
${bold}$ 10${norm}

- run inline :
${bold}$ runc 'printf(\"Hello!\");'${norm}

- easy start new C project :
${bold}$ runc > new.c${norm}

- get version :
${bold}$ runc -v${norm}
"

#=============================================================

srcpath=''
code=''
args=''

# no arguments
if [ $# -eq 0 ]; then

	if [[ -t 0 ]]; then
		# term in
		if [[ -t 1 ]]; then
			# term out
			echo "(Help : runc -h)"
			echo "Enter lines of code then hit CTRL+D :"
		else
			# print template
			echo -n "${runc_tpl/@code/}"
	    	exit 0
	    fi

	fi

	code=$(</dev/stdin)

else

	# help
	if 	[ "$1" = '-h' ] || [ "$1" = '--help' ]; then
		echo "$runc_help"
		exit 0
	fi

	# version
	if 	[ "$1" = '-v' ]; then
		echo "$runc_version"
		exit 0
	fi

	if [ -f "$1" ]; then
		# source is a file
		if grep -P -q '(int|void)\s+main' "$1"; then
			# self-standing
			srcpath=$1
		else
			code=$(<"$1")
		fi
	else
		code="$1"
	fi

	shift
	args=$*
fi

tmp=$(mktemp -q)

if [ -z "$srcpath" ]; then

	srcpath="$tmp.c"
	
	# if no main(), wrap in template
	hasmain=false
	echo "$code" | grep -P -q '(int|void)\s+main' && hasmain=true
	if ! $hasmain; then
		code=${runc_tpl/@code/$code}
	fi
	
	echo -n "$code" > "$srcpath"
fi

exepath="$tmp"

gcc $runc_flags "$srcpath" -o "$exepath" \
&& "$exepath" "$args" \
&& exit 0